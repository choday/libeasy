#pragma once
#include "ref_class.hpp"
/*
address_of_function为指向存放类成员函数(或者静态函数)变量的指针
object_ptr为指向ref_class_i的指针，

set函数中的object_ptr类型为void*,意为需要使用者正确将函数指针与对象转换ref_class_i的函数与ref_class_i对象
使用方法，参见event_emitter::set_function实现

不支持虚继承
*/
namespace ebase
{
    //如果object_ptr=0,address_of_function必须传入静态函数，
    //address_of_function如果为静态函数，object_ptr必须传入0,否则会导致异常
	class ref_function
	{
	public:
		ref_function(void** address_of_function=0,void* object_ptr=0,ref_class_i* holder=0);

        typedef struct  
        {
            void*   _function_ptr;
            void*   _offset;//this指针转换信息
        } function_truck;


		bool	isset();

        void    set( void** address_of_function,void* object_ptr,ref_class_i* holder);

		void    clear();

		void	invoke();
		template<class return_type> return_type invoke_result();
		
		//#include "ref_function_maker.h"
		template<  class argu_type_1 > void invoke(  argu_type_1 argu_1 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1); }else { typedef void (*lpfn)( argu_type_1 argu_1); ( ( *(lpfn*)&_function_ptr) )( argu_1); }} template<  class argu_type_1, class argu_type_2 > void invoke(  argu_type_1 argu_1, argu_type_2 argu_2 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2); }else { typedef void (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2); ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2); }} template<  class argu_type_1, class argu_type_2, class argu_type_3 > void invoke(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3); }else { typedef void (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3); ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3); }} template<  class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4 > void invoke(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4); }else { typedef void (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4); ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4); }} template<  class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5 > void invoke(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5); }else { typedef void (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5); ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5); }} template<  class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5, class argu_type_6 > void invoke(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6); }else { typedef void (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6); ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6); }} template<  class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5, class argu_type_6, class argu_type_7 > void invoke(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7); }else { typedef void (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7); ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7); }} template<  class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5, class argu_type_6, class argu_type_7, class argu_type_8 > void invoke(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7, argu_type_8 argu_8 ){ if(_object_ptr) { typedef void (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7, argu_type_8 argu_8); ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7, argu_8); }else { typedef void (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7, argu_type_8 argu_8); ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7, argu_8); }};
		template< class return_type, class argu_type_1 > return_type invoke_result(  argu_type_1 argu_1 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1); }else { typedef return_type (*lpfn)( argu_type_1 argu_1); return ( ( *(lpfn*)&_function_ptr) )( argu_1); }} template< class return_type, class argu_type_1, class argu_type_2 > return_type invoke_result(  argu_type_1 argu_1, argu_type_2 argu_2 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2); }else { typedef return_type (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2); return ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2); }} template< class return_type, class argu_type_1, class argu_type_2, class argu_type_3 > return_type invoke_result(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3); }else { typedef return_type (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3); return ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3); }} template< class return_type, class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4 > return_type invoke_result(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4); }else { typedef return_type (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4); return ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4); }} template< class return_type, class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5 > return_type invoke_result(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5); }else { typedef return_type (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5); return ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5); }} template< class return_type, class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5, class argu_type_6 > return_type invoke_result(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6); }else { typedef return_type (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6); return ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6); }} template< class return_type, class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5, class argu_type_6, class argu_type_7 > return_type invoke_result(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7); }else { typedef return_type (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7); return ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7); }} template< class return_type, class argu_type_1, class argu_type_2, class argu_type_3, class argu_type_4, class argu_type_5, class argu_type_6, class argu_type_7, class argu_type_8 > return_type invoke_result(  argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7, argu_type_8 argu_8 ){ if(_object_ptr) { typedef return_type (ref_function::*class_lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7, argu_type_8 argu_8); return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7, argu_8); }else { typedef return_type (*lpfn)( argu_type_1 argu_1, argu_type_2 argu_2, argu_type_3 argu_3, argu_type_4 argu_4, argu_type_5 argu_5, argu_type_6 argu_6, argu_type_7 argu_7, argu_type_8 argu_8); return ( ( *(lpfn*)&_function_ptr) )( argu_1, argu_2, argu_3, argu_4, argu_5, argu_6, argu_7, argu_8); }};

		function_truck		_function_ptr;
		void*	            _object_ptr;
        ref_ptr<>           _holder;
	};

	template<class return_type> return_type ref_function::invoke_result()
	{
		if(_object_ptr)
		{
			typedef return_type (ref_function::*class_lpfn)();
			return ( (ref_function*)_object_ptr->*( *(class_lpfn*)&_function_ptr) )();
		}else
		{
			typedef return_type (*lpfn)();
			return ( *(lpfn*)&_function_ptr )();
		}
	}
};